#!/usr/bin/env python3
"""
Script para testar detec√ß√£o autom√°tica de porta
"""
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

def test_port_detection():
    print("üîç TESTE DE DETEC√á√ÉO AUTOM√ÅTICA DE PORTA")
    print("=" * 60)
    
    try:
        # 1. Mostrar configura√ß√£o atual
        from app.core.config import settings
        print(f"üìã Configura√ß√£o atual:")
        print(f"   GSM_PORT: {settings.GSM_PORT}")
        print(f"   GSM_AUTO_DETECT: {settings.GSM_AUTO_DETECT}")
        print(f"   GSM_PREFERRED_PORTS: {settings.GSM_PREFERRED_PORTS}")
        
        # 2. Testar detector
        print(f"\nüîç Testando detector de modem...")
        from app.services.modem_detector import ModemDetector
        
        detector = ModemDetector()
        
        # Listar todas as portas
        all_ports = detector.list_available_ports()
        print(f"   Portas dispon√≠veis: {len(all_ports)}")
        for port in all_ports:
            print(f"     - {port['port']}: {port['description'][:60]}...")
        
        # Detectar modem GSM
        print(f"\nüì± Detectando modem GSM...")
        modem_info = detector.detect_gsm_modem()
        
        if modem_info:
            print(f"   ‚úÖ Modem encontrado!")
            print(f"     Porta: {modem_info['port']}")
            print(f"     Descri√ß√£o: {modem_info['description']}")
            print(f"     Fabricante: {modem_info.get('manufacturer', 'N/A')}")
        else:
            print(f"   ‚ùå Nenhum modem GSM encontrado")
        
        # 3. Testar GSMModem
        print(f"\nüîå Testando GSMModem com configura√ß√£o autom√°tica...")
        from app.services.gsm_service import GSMModem
        
        gsm = GSMModem()
        print(f"   Porta configurada: {gsm.port}")
        
        if gsm.port:
            print(f"   Tentando conectar...")
            if gsm.connect():
                print(f"   ‚úÖ Conex√£o bem-sucedida!")
                print(f"   üìä Status: {gsm.is_connected}")
                
                # Obter informa√ß√µes do modem
                try:
                    info = gsm._get_command_response("AT+CGMI")  # Fabricante
                    print(f"   üì± Fabricante: {info}")
                except:
                    print(f"   ‚ö†Ô∏è N√£o foi poss√≠vel obter informa√ß√µes do fabricante")
                
                gsm.disconnect()
                print(f"   üîå Desconectado")
            else:
                print(f"   ‚ùå Falha na conex√£o")
        else:
            print(f"   ‚ùå Nenhuma porta dispon√≠vel")
        
        # 4. Testar SMSService
        print(f"\nüì± Testando SMSService com nova configura√ß√£o...")
        from app.services.sms_service import SMSService
        
        sms_service = SMSService()
        if sms_service.gsm_modem.is_connected:
            print(f"   ‚úÖ SMSService conectado na porta: {sms_service.gsm_modem.port}")
        else:
            print(f"   ‚ö†Ô∏è SMSService n√£o conectado (modo simula√ß√£o)")
        
        print(f"\nüéØ CONCLUS√ÉO:")
        if modem_info:
            print(f"   ‚úÖ Sistema configurado corretamente")
            print(f"   üì± Modem na porta: {modem_info['port']}")
            print(f"   üîß Configura√ß√£o: Detec√ß√£o autom√°tica ativa")
        else:
            print(f"   ‚ö†Ô∏è Modem n√£o detectado")
            print(f"   üí° Verifique:")
            print(f"     - Modem conectado via USB")
            print(f"     - Drivers instalados")
            print(f"     - SIM card inserido")
        
    except Exception as e:
        print(f"üí• Erro: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ AMA MESSAGE - Teste de Configura√ß√£o de Porta")
    success = test_port_detection()
    
    print("=" * 60)
    if success:
        print("üéâ Teste conclu√≠do!")
        print("\nPara usar o sistema:")
        print("1. python start_server.py")
        print("2. Acesse: http://127.0.0.1:8000/admin/modem")
    else:
        print("‚ö†Ô∏è H√° problemas na configura√ß√£o")
